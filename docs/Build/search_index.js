var documenterSearchIndex = {"docs":
[{"location":"handling/#Handling-Dump-Files","page":"Handling Dump Files","title":"Handling Dump Files","text":"","category":"section"},{"location":"handling/","page":"Handling Dump Files","title":"Handling Dump Files","text":"getNatoms(\"inputfile\")","category":"page"},{"location":"handling/#GranularLammpsDump.getNatoms-Tuple{Any}","page":"Handling Dump Files","title":"GranularLammpsDump.getNatoms","text":"getNatoms(\"inputfile\")\n\nParses the total number of atoms into an integer.\n\nLooks at the 4th line of the dump file and parses the number of atoms from the readline string into an integer.\n\n\n\n\n\n","category":"method"},{"location":"handling/","page":"Handling Dump Files","title":"Handling Dump Files","text":"readdump(\"inputfile\")","category":"page"},{"location":"handling/#GranularLammpsDump.readdump-Tuple{Any}","page":"Handling Dump Files","title":"GranularLammpsDump.readdump","text":"readdump(\"inputfile\")\n\nConverts the contents of the dumpfile to a massive dictionary.\n\nReads the dumpfile into a matrix, shapes the matrix, and removes text lines.  The number of atoms is extracted and used internally but not returned.  The final dictionary form has timesteps as keys, and matrices sorted by particle ID number as values.  In principle, this works for any dumpfile with at least 6 columns of output, but has been tested with 6 output columns and 9 output columns.  \n\n> Each timestep looks something like this: \n> | 1  |  2    | 3 | 4 | 5 | 6  | 7  | 8  | 9  | 10 | 11 |\n> | ID | GROUP | x | y | z | vx | vy | vz | ux | uy | uz |\n\n\n\n\n\n","category":"method"},{"location":"handling/","page":"Handling Dump Files","title":"Handling Dump Files","text":"parsestep(dump,ts)","category":"page"},{"location":"handling/#GranularLammpsDump.parsestep-Tuple{Any, Any}","page":"Handling Dump Files","title":"GranularLammpsDump.parsestep","text":"parsestep(d,ts)\n\nStores critical info from a dump step in a mutable struct.\n\nIterate this in a loop to step through a simulation.\n\n\n\n\n\n","category":"method"},{"location":"handling/","page":"Handling Dump Files","title":"Handling Dump Files","text":"dump2mat(dump,exportflag=1)","category":"page"},{"location":"handling/#GranularLammpsDump.dump2mat","page":"Handling Dump Files","title":"GranularLammpsDump.dump2mat","text":"dump2mat(dict,exportflag=1)\n\nConverts the readdump dictionary to one giant matrix.  Optionally export as .csv file.\n\nExport to .csv is on by default.  This will help you collaborate with Matlab users ;)  Set exportflag to 0 to turn off.  \n\n\n\n\n\n","category":"function"},{"location":"#GranularLammpsDump-Documentation","page":"Home","title":"GranularLammpsDump Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Tools for parsing LAMMPS dumps (dump files), exporting the parsed dumps, and visualizing the simulation as a .mp4 movie. Developed during research for a master's thesis in sheared, vibrated granular flows at the Naval Postgraduate School, Monterey CA. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"index.md\", \"handling.md\", \"visualizing.md\"]\nDepth = 2","category":"page"},{"location":"visualizing/#Visualizing-Dump-Files","page":"Visualizing Dump Files","title":"Visualizing Dump Files","text":"","category":"section"},{"location":"visualizing/","page":"Visualizing Dump Files","title":"Visualizing Dump Files","text":"setdefaults()","category":"page"},{"location":"visualizing/#GranularLammpsDump.setdefaults-Tuple{}","page":"Visualizing Dump Files","title":"GranularLammpsDump.setdefaults","text":"setdefaults()\n\nCreate the first settings file for the project.\n\nExample\n\njulia> cd(\"/home/JuliaUser/Project\")\njulia> setdefaults()  \nDefault settings.conf created.  \nEdit this using menu() or your favorite text editor.  \n\n\n\n\n\n","category":"method"},{"location":"visualizing/","page":"Visualizing Dump Files","title":"Visualizing Dump Files","text":"menu()","category":"page"},{"location":"visualizing/#GranularLammpsDump.menu-Tuple{}","page":"Visualizing Dump Files","title":"GranularLammpsDump.menu","text":"menu()\n\nBrings up the settings menu in system program nano.\n\nSneaky dependency: requires nano to be installed prior to use.\n\n\n\n\n\n","category":"method"},{"location":"visualizing/","page":"Visualizing Dump Files","title":"Visualizing Dump Files","text":"settingsloader()","category":"page"},{"location":"visualizing/#GranularLammpsDump.settingsloader-Tuple{}","page":"Visualizing Dump Files","title":"GranularLammpsDump.settingsloader","text":"settingsloader()\n\nLoads the settings.conf file into a settings dictionary.\n\nUsed inside other functions, but not useful as a standalone function.\n\n\n\n\n\n","category":"method"},{"location":"visualizing/#All-Grains","page":"Visualizing Dump Files","title":"All Grains","text":"","category":"section"},{"location":"visualizing/","page":"Visualizing Dump Files","title":"Visualizing Dump Files","text":"makemovie_allgrains(dump,skips,dumpfile=\"allgrains\")","category":"page"},{"location":"visualizing/#GranularLammpsDump.makemovie_allgrains","page":"Visualizing Dump Files","title":"GranularLammpsDump.makemovie_allgrains","text":"makemovie_allgrains(dump, skips, dumpfile=\"allgrains\")\n\nMakes an mp4 movie with 5 groups color coded by initial x position.  \n\nThe \"skips\" variable takes every Nth timestep from the dump dictionary. E.g., use 1 for every timestep or 10 to take every 10th step.\n\nOutput is an .mp4 video in the project directory.  The optional dumpfile argument allows matching the output.mp4 to the input file name.\n\n\n\n\n\n","category":"function"},{"location":"visualizing/#Slices-of-Grains","page":"Visualizing Dump Files","title":"Slices of Grains","text":"","category":"section"},{"location":"visualizing/","page":"Visualizing Dump Files","title":"Visualizing Dump Files","text":"makemovie_xslice(dump,skips,dumpfile=\"xslice\")","category":"page"},{"location":"visualizing/#GranularLammpsDump.makemovie_xslice","page":"Visualizing Dump Files","title":"GranularLammpsDump.makemovie_xslice","text":"makemovie_xslice(dump, skips, dumpfile=\"allgrains\")\n\nMakes an mp4 movie from one x slice, top to bottom, and color codes the particles based on \"granular temperature\" in the current step. \n\nThe \"skips\" variable takes every Nth timestep from the dump dictionary. E.g., use 1 for every timestep or 10 to take every 10th step.\n\nOutput is an .mp4 video in the project directory.  The optional dumpfile argument allows matching the output.mp4 to the input file name.\n\n\n\n\n\n","category":"function"}]
}
