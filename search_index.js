var documenterSearchIndex = {"docs":
[{"location":"handling/#Handling-Dump-Files","page":"Handling Dump Files","title":"Handling Dump Files","text":"","category":"section"},{"location":"handling/#Reading-the-Dump","page":"Handling Dump Files","title":"Reading the Dump","text":"","category":"section"},{"location":"handling/","page":"Handling Dump Files","title":"Handling Dump Files","text":"getNatoms(\"inputfile\")","category":"page"},{"location":"handling/#GranularLammpsDump.getNatoms-Tuple{Any}","page":"Handling Dump Files","title":"GranularLammpsDump.getNatoms","text":"getNatoms(\"inputfile\")\n\nParses the total number of atoms into an integer.\n\nLooks at the 4th line of the dump file and parses the number of atoms from the readline string into an integer.\n\n\n\n\n\n","category":"method"},{"location":"handling/","page":"Handling Dump Files","title":"Handling Dump Files","text":"getdumpsections(\"inputfile\")","category":"page"},{"location":"handling/#GranularLammpsDump.getdumpsections-Tuple{Any}","page":"Handling Dump Files","title":"GranularLammpsDump.getdumpsections","text":"getdumpsections(in)\n\nReads the first timestep of a dumpfile and returns section headings.\n\n\n\n\n\n","category":"method"},{"location":"handling/","page":"Handling Dump Files","title":"Handling Dump Files","text":"readdump(\"inputfile\")","category":"page"},{"location":"handling/#GranularLammpsDump.readdump-Tuple{Any}","page":"Handling Dump Files","title":"GranularLammpsDump.readdump","text":"readdump(\"inputfile\")\n\nConverts the contents of the dumpfile to dictionaries indexed by step number.\n\nRETURNS\n\ndumpstep -> Dictionary where each value is an array of atom attributes for one timestep, sorted by Atom ID.\nboxes -> Dictionary where each value is an [xlo, xhi], [ylo, yhi], [zlo, zhi] array.\nNatoms -> The Int number of atoms in the simulation.\ntimedict -> Dictionary where each value is the true timestep from the dump.\n\nReads the dumpfile into a matrix, shapes the matrix, and removes text lines.  The number of atoms is extracted and used internally but not returned.  The final dictionary form has timesteps as keys, and matrices sorted by particle ID number as values.  In principle, this works for any dumpfile with at least 6 columns of output, but has been tested with 6 output columns and 9 output columns.  \n\nEach timestep looks something like this:      | 1  |  2    | 3 | 4 | 5 | 6  | 7  | 8  | 9  | 10 | 11 |     | ID | GROUP | x | y | z | vx | vy | vz | ux | uy | uz |\n\n\n\n\n\n","category":"method"},{"location":"handling/","page":"Handling Dump Files","title":"Handling Dump Files","text":"readdump2(\"inputfile\")","category":"page"},{"location":"handling/#GranularLammpsDump.readdump2-Tuple{Any}","page":"Handling Dump Files","title":"GranularLammpsDump.readdump2","text":"readdump2(\"inputfile\")\n\nConverts the contents of the dumpfile to one dictionary with section titles as keys and data dictionaries as values.\n\nCompared to readdump(), this is SLOWER and MORE GENERAL.  readdump2() should work with ANY dump file.  The outputs are NOT indexed by atom ID.  Use readdump() for custom or atom dumps.\n\n\n\n\n\n","category":"method"},{"location":"handling/#Using-the-Dump","page":"Handling Dump Files","title":"Using the Dump","text":"","category":"section"},{"location":"handling/","page":"Handling Dump Files","title":"Handling Dump Files","text":"parsestep(dump,ts)","category":"page"},{"location":"handling/#GranularLammpsDump.parsestep-Tuple{Any, Any}","page":"Handling Dump Files","title":"GranularLammpsDump.parsestep","text":"parsestep(d,ts)\n\nStores critical info from a dump step in a mutable struct.\n\nIterate this in a loop to step through a simulation.\n\n\n\n\n\n","category":"method"},{"location":"handling/","page":"Handling Dump Files","title":"Handling Dump Files","text":"dump2mat(dump,exportflag=1)","category":"page"},{"location":"handling/#GranularLammpsDump.dump2mat","page":"Handling Dump Files","title":"GranularLammpsDump.dump2mat","text":"dump2mat(dict,exportflag=1)\n\nConverts the readdump dictionary to one giant matrix.  Optionally export as .csv file.\n\nExport to .csv is on by default.  This will help you collaborate with Matlab users ;)  Set exportflag to 0 to turn off.  \n\n\n\n\n\n","category":"function"},{"location":"#GranularLammpsDump-Quick-Start","page":"Home","title":"GranularLammpsDump Quick Start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Tools for parsing LAMMPS dumps (dump files output with \"atom\" or \"custom\" arguments), exporting the parsed dumps, and visualizing the simulation as a .mp4 movie. Developed during research for a master's thesis in sheared, vibrated granular flows at the Naval Postgraduate School, Monterey CA. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: exampleviz1)","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This library isn't in the official registry (yet?).  Add with:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> ]   pkg> add https://github.com/mitchellirmer/GranularLammpsDump.jl.git   julia> using GranularLammpsDump  ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Update with ","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> ]   pkg> update","category":"page"},{"location":"#Reading-and-Parsing-Dumps","page":"Home","title":"Reading and Parsing Dumps","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Read an entire dump file into a dictionary with readdump(inputfile).  In principle, this works with any \"atom\" or \"custom\" mode LAMMPS dump, but is tested to work for this case in particular:","category":"page"},{"location":"","page":"Home","title":"Home","text":"|–––––––––––––––––|  | ITEM: TIMESTEP                   |  | ITEM: NUMBER OF ATOMS            |  | ITEM: BOX BOUNDS pp pp ss        |  | ITEM: ATOMS id type x y z vx ... |  |–––––––––––––––––|  dump, boxes, Natoms, times = readdump(\"inputfile\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"Optionally, use readdump2(inputfile) for other dump file setups.  This version is slower by at least a factor of 2 (and the atoms are not indexed by ID in the output), but this /should/ work for any dump.  The output is a dictionary of section titles as keys and dictionaries of each section as values.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Parse one step at a time into a mutable struct with parsestep – iterate to analyze multiple steps.  By default, it is set up for x, y, z positions, and vx, vy, vz velocities.  The mutable struct could be modified for any custom outputs.   ","category":"page"},{"location":"","page":"Home","title":"Home","text":"step = parsestep(dump, stepnumber)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Export an entire reshaped dump as Julia matrix and optionally as a CSV file to be read into MATLAB (c).  It can export the dump, boxes, and times dictionaries.  ","category":"page"},{"location":"","page":"Home","title":"Home","text":"matrix = dump2mat(dictionary,exportflag)  # // 0 for no CSV, 1 to export a CSV","category":"page"},{"location":"#Visualizing","page":"Home","title":"Visualizing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Open Julia in, or cd() into, the project folder.  \nRun the setdefaults() function to create a settings.conf menu file in the project folder.  ","category":"page"},{"location":"","page":"Home","title":"Home","text":"setdefaults()","category":"page"},{"location":"","page":"Home","title":"Home","text":"Use menu() to open the settings menu in nano, or open settings.conf in the working directory in your favorite text editor.  ","category":"page"},{"location":"","page":"Home","title":"Home","text":"menu()","category":"page"},{"location":"","page":"Home","title":"Home","text":"Use readdump(inputfile) to load a dump file.  ","category":"page"},{"location":"","page":"Home","title":"Home","text":"dump, boxes, Natoms, times = readdump(\"inputfile\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"Run one of the makemovie functions to make a movie.  The \"skips\" variable takes every Nth timestep from the dump dictionary. E.g., use 1 for every timestep or 10 to take every 10th step.  makemovi() takes one x slice, top to bottom, and color codes the particles based on \"granular temperature\" in the current step.  The \"allgrains\" variant visualizes all grains with colorcoding by initial x position.  ","category":"page"},{"location":"","page":"Home","title":"Home","text":"makemovie(dump, boxes, Tref, skips, moviename)makemovie_allgrains(dump, boxes, skips, moviename)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"index.md\", \"handling.md\", \"visualizing.md\"]\nDepth = 3","category":"page"},{"location":"visualizing/#Visualizing-Dump-Files","page":"Visualizing Dump Files","title":"Visualizing Dump Files","text":"","category":"section"},{"location":"visualizing/#Initial-Set-Up","page":"Visualizing Dump Files","title":"Initial Set Up","text":"","category":"section"},{"location":"visualizing/","page":"Visualizing Dump Files","title":"Visualizing Dump Files","text":"setdefaults()","category":"page"},{"location":"visualizing/#GranularLammpsDump.setdefaults-Tuple{}","page":"Visualizing Dump Files","title":"GranularLammpsDump.setdefaults","text":"setdefaults()\n\nCreate the first settings file for the project.\n\nExample\n\njulia> cd(\"/home/JuliaUser/Project\")\njulia> setdefaults()  \nDefault settings.conf created.  \nEdit this using menu() or your favorite text editor.  \n\n\n\n\n\n","category":"method"},{"location":"visualizing/","page":"Visualizing Dump Files","title":"Visualizing Dump Files","text":"menu()","category":"page"},{"location":"visualizing/#GranularLammpsDump.menu-Tuple{}","page":"Visualizing Dump Files","title":"GranularLammpsDump.menu","text":"menu()\n\nBrings up the settings menu in system program nano.\n\nSneaky dependency: requires nano to be installed prior to use.\n\n\n\n\n\n","category":"method"},{"location":"visualizing/","page":"Visualizing Dump Files","title":"Visualizing Dump Files","text":"settingsloader()","category":"page"},{"location":"visualizing/#GranularLammpsDump.settingsloader-Tuple{}","page":"Visualizing Dump Files","title":"GranularLammpsDump.settingsloader","text":"settingsloader()\n\nLoads the settings.conf file into a settings dictionary.\n\nUsed inside other functions, but not useful as a standalone function.\n\n\n\n\n\n","category":"method"},{"location":"visualizing/#Color-coded-by-initial-x-position","page":"Visualizing Dump Files","title":"Color coded by initial x position","text":"","category":"section"},{"location":"visualizing/","page":"Visualizing Dump Files","title":"Visualizing Dump Files","text":"makemovie_allgrains(dump,boxes,skips,moviename=\"granularmovie\")","category":"page"},{"location":"visualizing/#GranularLammpsDump.makemovie_allgrains","page":"Visualizing Dump Files","title":"GranularLammpsDump.makemovie_allgrains","text":"makemovie_allgrains(dump,boxes,skips,moviename=\"granularmovie\")\n\nMakes an .mp4 movie with all grains shown, color coded by initial x position.\n\n\n\n\n\n","category":"function"},{"location":"visualizing/#Color-coded-by-granular-temperature","page":"Visualizing Dump Files","title":"Color coded by granular temperature","text":"","category":"section"},{"location":"visualizing/","page":"Visualizing Dump Files","title":"Visualizing Dump Files","text":"makemovie(dump,boxes,Tref,skips,moviename=\"granularmovie\")","category":"page"},{"location":"visualizing/#GranularLammpsDump.makemovie","page":"Visualizing Dump Files","title":"GranularLammpsDump.makemovie","text":"makemovie(dump,boxes,Tref,skips,moviename=\"granularmovie\")\n\nMakes an .mp4 movie with all grains shown depicting temperature.\n\nGrains outside the slice of interest are shown as transparent with black borders.\n\nARGUMENTS\n\nTref is a string, like \"0:1/4:6\" that sets the powers in 10^Tref\n\n\n\n\n\n","category":"function"}]
}
